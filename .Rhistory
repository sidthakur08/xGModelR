'%!in%' <- function(x,y)!('%in%'(x,y))
####Obtain Competitions####
#Read File from JSON into a list
competitions <- fromJSON(file="/Users/sidthakur08/ML/Code/Soccer/soccermatics/Statsbomb/data/competitions.json")
#Convert List into a DataFrame
competitions.df <- data.frame(do.call(rbind,competitions),stringsAsFactors = FALSE)
####Obtain Matches####
match.files <- list.files(path="/Users/sidthakur08/ML/Code/Soccer/soccermatics/Statsbomb/data/matches",
full.names = TRUE,recursive = TRUE)
matches.list <- list()
for(i in 1:length(match.files)){
match.temp <- fromJSON(file=match.files[i]) ##Loop through each file which contains all the matches for a given competition and season and obtain the necessary match information
matches <- lapply(match.temp, function(x) data.frame(t(unlist(x)),stringsAsFactors = FALSE))
matches.df <- rbindlist(matches,fill=TRUE) #we use rbindlist instead of do.call(rbind,) because of column mismatch
matches.list[[i]] <- matches.df #this assigns matches.df to the matches.list list that we initialized
}
all.matches.df <- data.frame(rbindlist(matches.list,fill=TRUE)) ###Combines all matches from all competitions into one dataframe
###we are going to remove a lot of columns to just make our dataset clean
columns.to.keep <- names(which(unlist(lapply(all.matches.df,function(x) length(which(is.na(x)))))==0))
all.matches.clean <- all.matches.df[,columns.to.keep] #this selects the columns by column name
all.matches.clean$match_week <- as.numeric(all.matches.clean$match_week) #convert some variables to numeric
all.matches.clean$home_score <- as.numeric(all.matches.clean$home_score)
all.matches.clean$away_score <- as.numeric(all.matches.clean$away_score)
####Obtain Events####
event.files <- list.files(path="/Users/sidthakur08/ML/Code/Soccer/soccermatics/Statsbomb/data/events",
full.names = TRUE,recursive = TRUE)
event.list <- list()
for(i in 1:length(event.files)){
event.temp <- fromJSON(file=event.files[i])
#unique(unlist(lapply(event.temp,function(x) x$type$name))) | Let's us see the unique events that happen in a game
teamids <- c() #Get the unique teamids participating in a match
#obtain the index where we find the event that talks about Starting XI
starting.x11.index <- which(unlist(lapply(event.temp,function(x) x$type$name))=="Starting XI")
starting.x11.list <- list()
for(s in 1:2){
#we need to remove "jersey_number" from the starting XI because sometimes it is missing and causes recylcing of the matrix
jersey.number.index <- which(names(unlist(event.temp[[s]]$tactics$lineup))=="jersey_number")
starting.x11 <- t(unlist(event.temp[[s]]$tactics$lineup)[-which(names(unlist(event.temp[[s]]$tactics$lineup))=="jersey_number")])
starting.x11.team1 <- data.frame(matrix(starting.x11,ncol=4,byrow = TRUE),stringsAsFactors = FALSE)
colnames(starting.x11.team1) <- names(unlist(event.temp[[s]]$tactics$lineup)[-which(names(unlist(event.temp[[s]]$tactics$lineup))=="jersey_number")])[1:4]
starting.x11.team1$formation <- event.temp[[s]]$tactics$formation
starting.x11.team1$team_id <- event.temp[[s]]$team$id
teamids <- c(teamids,event.temp[[s]]$team$id)
starting.x11.team1$team_name <- event.temp[[s]]$team$name
starting.x11.list[[s]] <- starting.x11.team1
}
pass.index <- which(unlist(lapply(event.temp,function(x) x$type$name))=="Pass")
#obtain the passes just for team1 (the first element in teamids)
pass.team1 <- pass.index[which(unlist(lapply(pass.index,function(x) event.temp[[x]]$team$id))==teamids[1])]
pass.team1.df <- data.frame(matrix(NA,nrow=1,ncol=12))
colnames(pass.team1.df) <- c("passid","Possession","Passer","X.Pass","Y.Pass",
"Pass.Type","Receiver","X.Receive","Y.Receive",
"Pass.Length","Pass.Angle","Body.Part")
for(p in 1:length(pass.team1)){
pass.temp <- event.temp[[pass.team1[p]]]
pass.id <- pass.temp$id
possession <- pass.temp$possession
passer <- pass.temp$player$name
pass.location <- pass.temp$location
pass.type <- pass.temp$pass$height$name
receiver <- ifelse("recipient" %!in% names(pass.temp$pass),NA,pass.temp$pass$recipient$name)
receive.location <- pass.temp$pass$end_location
pass.length <- pass.temp$pass$length
pass.angle <- pass.temp$pass$angle
body.part <- pass.temp$pass$body_part$name
row.toadd <- c(pass.id,possession,passer,pass.location,pass.type,receiver,receive.location,pass.length,pass.angle,body.part)
pass.team1.df <- rbind(pass.team1.df,row.toadd)
}
pass.team1.df <- pass.team1.df[-1,]
pass.team1.df[,c(2,4,5,8:11)] <- lapply(pass.team1.df[,c(2,4,5,8:11)],as.numeric)
pass.team1.df <- pass.team1.df %>% group_by(Possession) %>% mutate(seq = row_number())
pass.team1.df$team_id <- teamids[1]
pass.team2 <- pass.index[which(unlist(lapply(pass.index,function(x) event.temp[[x]]$team$id))==teamids[2])]
pass.team2.df <- data.frame(matrix(NA,nrow=1,ncol=12))
colnames(pass.team2.df) <- c("passid","Possession","Passer","X.Pass","Y.Pass",
"Pass.Type","Receiver","X.Receive","Y.Receive",
"Pass.Length","Pass.Angle","Body.Part")
for(p in 1:length(pass.team2)){
pass.temp <- event.temp[[pass.team2[p]]]
pass.id <- pass.temp$id
possession <- pass.temp$possession
passer <- pass.temp$player$name
pass.location <- pass.temp$location
pass.type <- pass.temp$pass$height$name
receiver <- ifelse("recipient" %!in% names(pass.temp$pass),NA,pass.temp$pass$recipient$name)
receive.location <- pass.temp$pass$end_location
pass.length <- pass.temp$pass$length
pass.angle <- pass.temp$pass$angle
body.part <- pass.temp$pass$body_part$name
row.toadd <- c(pass.id, possession,passer,pass.location,pass.type,receiver,receive.location,pass.length,pass.angle,body.part)
pass.team2.df <- rbind(pass.team2.df,row.toadd)
}
pass.team2.df <- pass.team2.df[-1,]
pass.team2.df[,c(2,4,5,8:11)] <- lapply(pass.team2.df[,c(2,4,5,8:11)],as.numeric)
pass.team2.df <- pass.team2.df %>% group_by(Possession) %>% mutate(seq = row_number())
pass.team2.df$team_id <- teamids[2]
pass.list <- list(pass.team1.df,pass.team2.df)
shot.index <- which(unlist(lapply(event.temp,function(x) x$type$name))=="Shot")
#obtain the shots just for team1 (the first element in teamids)
shots.team1 <- shot.index[which(unlist(lapply(shot.index,function(x) event.temp[[x]]$team$id))==teamids[1])]
shots.team1.df <- data.frame(matrix(NA,nrow=1,ncol=11))
colnames(shots.team1.df) <- c("Possession","Player","X.Shot","Y.Shot",
"Shot.Type","xG","keypassid","X.KeyPass","Y.KeyPass","Shot.Outcome","Shot.Foot")
if(length(shots.team1)!=0){
for(p in 1:length(shots.team1)){
shots.temp <- event.temp[[shots.team1[p]]]
possession <- shots.temp$possession
shooter <- shots.temp$player$name
shots.location <- shots.temp$location
shots.type <- shots.temp$shot$technique$name
shots.xg <- ifelse("statsbomb_xg" %!in% names(shots.temp$shot),NA, shots.temp$shot$statsbomb_xg)
keypass <- ifelse("key_pass_id" %!in% names(shots.temp$shot),NA,shots.temp$shot$key_pass_id)
keypass.location <- if(!is.na(keypass)){
as.vector(unlist(pass.team1.df[which(pass.team1.df$passid==keypass),c("X.Pass","Y.Pass")]))
}else{
c(NA,NA)
}
shots.outcome <- shots.temp$shot$outcome$name
body.part <- shots.temp$shot$body_part$name
row.toadd <- c(possession,shooter,shots.location,shots.type,shots.xg,keypass,keypass.location[1],keypass.location[2],shots.outcome,body.part)
shots.team1.df <- rbind(shots.team1.df,row.toadd)
}
shots.team1.df <- shots.team1.df[-1,]
shots.team1.df[,c(1,3,4,6,8,9)] <- lapply(shots.team1.df[,c(1,3,4,6,8,9)],as.numeric)
shots.team1.df$team_id <- teamids[1]
}
shots.team2 <- shot.index[which(unlist(lapply(shot.index,function(x) event.temp[[x]]$team$id))==teamids[2])]
shots.team2.df <- data.frame(matrix(NA,nrow=1,ncol=11))
colnames(shots.team2.df) <- c("Possession","Player","X.Shot","Y.Shot",
"Shot.Type","xG","keypassid","X.KeyPass","Y.KeyPass","Shot.Outcome","Shot.Foot")
if(length(shots.team2)!=0){
for(p in 1:length(shots.team2)){
shots.temp <- event.temp[[shots.team2[p]]]
possession <- shots.temp$possession
shooter <- shots.temp$player$name
shots.location <- shots.temp$location
shots.type <- shots.temp$shot$technique$name
shots.xg <- ifelse("statsbomb_xg" %!in% names(shots.temp$shot),NA, shots.temp$shot$statsbomb_xg)
keypass <- ifelse("key_pass_id" %!in% names(shots.temp$shot),NA,shots.temp$shot$key_pass_id)
keypass.location <- if(!is.na(keypass)){
as.vector(unlist(pass.team1.df[which(pass.team1.df$passid==keypass),c("X.Pass","Y.Pass")]))
}else{
c(NA,NA)
}
shots.outcome <- shots.temp$shot$outcome$name
body.part <- shots.temp$shot$body_part$name
row.toadd <- c(possession,shooter,shots.location,shots.type,shots.xg,keypass,keypass.location[1],keypass.location[2],shots.outcome,body.part)
shots.team2.df <- rbind(shots.team2.df,row.toadd)
}
shots.team2.df <- shots.team2.df[-1,]
shots.team2.df[,c(1,3,4,6,8,9)] <- lapply(shots.team2.df[,c(1,3,4,6,8,9)],as.numeric)
shots.team2.df$team_id <- teamids[2]
}
shot.list <- list(shots.team1.df,shots.team2.df)
match.id <- strsplit(basename(event.files[i]),"[.]")[[1]][1]
event.list[[match.id]] <- list(starting.x11.list,pass.list,shot.list)
}
save.image("~/ML/Code/Soccer/soccermatics/R/before WebApp.RData")
shots <- lapply(event.list,function(x) x[[3]]) #we want to just take the shots information from the event.list list
View(shots)
shots <- lapply(event.list,function(x) x[[3]]) #we want to just take the shots information from the event.list list
shots.df <- plyr::ldply(lapply(shots,function(x) rbindlist(x,fill=TRUE)),.id="match_id") #we want to combine both teams' shots within a game into a datamframe, and then combine all matches together using match_id as a new column
shots.df <- shots.df %>% group_by(match_id,team_id) %>% mutate(xGoal_Total = sum(xG))
View(shots.df)
View(shots.df)
shots.shiny <- merge(shots.df,all.matches.df[,c("match_id","competition.competition_name","season.season_name",
"home_score","away_score","home_team.home_team_id","away_team.away_team_id",
"home_team.home_team_name","away_team.away_team_name")],by="match_id") #some matches are missing
#This is calculating the TeamScore for the team_id column so that I can use this in calculating the difference between actual goals and expected goals for an entire match for a team
shots.shiny$TeamScore <- ifelse(shots.shiny$team_id==shots.shiny$home_team.home_team_id,
as.numeric(shots.shiny$home_score),
as.numeric(shots.shiny$away_score))
#This is the calculation for calculating the difference between actual and expected
shots.shiny$xG_Diff <- shots.shiny$TeamScore - shots.shiny$xGoal_Total
#The next three lines just gives me the an additional column to the shots dataframe to let me know which team took the shot
teams.df <- unique(all.matches.df[,c("home_team.home_team_id","home_team.home_team_name")])
shots.shiny.final <- merge(shots.shiny,teams.df,by.x="team_id",by.y="home_team.home_team_id")
colnames(shots.shiny.final)[25] <- "team_name"
#Adding a column to let me know if a shot was assisted or not
shots.shiny.final$isAssisted <- ifelse(is.na(shots.shiny.final$keypassid),FALSE,TRUE)
View(shots.shiny)
View(shots.shiny)
View(shots.shiny.final)
View(shots.shiny.final)
View(shots.shiny.final)
View(shots.shiny.final)
install.packages("shiny")
install.packages("shiny")
library(shiny)
g = 6.9
g
g = 6.9
s = as.integer(3)
is.integer(s)
s = k+2i
k = 1+2i
s = k+2i
s
g = a&b
g = s&k
g
s
k
k = 4+2i
g = s&k
g
cat("\014")
vec1 <- c(2,4,6,7,9)
vec1
vec2 <- (1,2,3,4,5,6,7,8,9,10)
vec2 <- c(1,2,3,4,5,6,7,8,9,10)
vec2
rbind(vec1,vec2)
cbind(vec1,vec2)
rbind(vec2,vec1)
cbind(vec2,vec1)
vec2 <- c(2,4,6,7,9)
vec1 <- (1,2,3,4,5,6,7,8,9,10)
vec2 <- c(2,4,6,7,9)
cat("\014")
vec1 <- c(1,2,3,4,5,6,7,8,9,10)
vec2 <- c(2,4,6,7,9)
max1 <- rbind(vec1,vec2)
max2 <- cbind(vec1,vec2)
max1
max2
sno <- 1:10
regno <- 100:110
intern_comp <- c('google','microsoft','ibm','intel','american express','accenture','here','amazon','adobe','jp morgan chase')
no_months <- c(2,3,4,2,4,6,3,2,3,4)
len(sno)
length(sno)
length(regno)
regno <- regno[:10]
regno[:10]
regno[:1]
regno[10]
regno-110
regno <- 100:109
length((regno))
sno <- 1:10
regno <- 100:110
intern_comp <- c('google','microsoft','ibm','intel','american express','accenture','here','amazon','adobe','jp morgan chase')
no_months <- c(2,3,4,2,4,6,3,2,3,4)
regno <- 100:109
cat("/014")
cat("\014")
sno <- 1:10
regno <- 100:109
intern_comp <- c('google','microsoft','ibm','intel','american express','accenture','here','amazon','adobe','jp morgan chase')
no_months <- c(2,3,4,2,4,6,3,2,3,4)
loc <- c('delhi','mumbai','bangalore','chennai','delhi','chennai','hyderabad','hyderabad','bangalore','mumbai')
intern_df <- data.frame(sno,regno,intern_comp,no_months,loc)
intern_df
vec1 <- (1,2,3,4,5,6,7,8,9,10)
vec1 <- c(1,2,3,4,5,6,7,8,9,10)
vec2 <- c(2,4,6,7,9)
vec2
max1 <- rbind(vec1,vec2)
max2 <- cbind(vec1,vec2)
max1
maax2
max2
arr1 = array(data = vec1)
arr1
help(list)
main_list <- list(vec2,max2,intern_df,arr1)
main_list
vec1 <- c(1,2,3,4,5,6,7,8,9,10)
vec2 <- c(2,4,6,7,9)
vec1
vec2
max1 <- rbind(vec1,vec2)
max2 <- cbind(vec1,vec2)
mmax1
max1
max2
cat("\014")
a<-3.4
b<-2.67
a+b
a-b
a=0
a=0
x <- -1 if(a!=0){}
else{
1
}
x <- -1 if(a!=0)
x <- -1 if(a!=0){
x <- -1
}
x<-1
if(x>0){
print("positive")
}
else{
print("negative")
}
x<1
if(x>0){
print("positive")
}
x<-1
if(x>0){
print("positive")
}
else{
print("negative")
}
if(x>0){
print("positive")
} else{
print("negative")
}
x<-1
if(x>0){
print("positive")
} else{
print("negative")
}
x<-1
x<- -1
if(x>0){
print("positive")
} else{
print("negative")
}
("cat\014")
cat("\014")
readint <- function(){
n<- as.integer(readline(prompt = "Enter an integer"))
if (n>=0){
print("This is non negative number")
}else{
print("This is a negative number")
}
}
readint()
readint()
for (i in 1:n){
print("Hello for ",i," user")
}
n=100
for (i in 1:n){
print("Hello for ",i," user")
n=100
for (i in 1:n){
print("Hello for ",i," user")
}
}
n=100
for (i in 1:n){
print("Hello for ",i," user")
}
for (i in 1:n){
print("Hello for "+i+" user")
}
for (i in 1:n){
print("Hello for ",i," user")
}
print("Hello for ",i," user")
print(paste("Hello for ",i," user"))
for (i in 1:n){
print(paste("Hello for ",i," user"))
}
data(custdata)
data(lahman)
library(Lahman)
'''readint <- function(){
n<- as.integer(readline(prompt = "Enter an integer"))
if (n>=0){
print("This is non negative number")
}else{
print("This is a negative number")
}
}
readint()
n=100
for (i in 1:n){
print(paste("Hello for ",i," user"))
}
library(Lahman)
'''
'''readint <- function(){
n<- as.integer(readline(prompt = "Enter an integer"))
if (n>=0){
print("This is non negative number")
}else{
print("This is a negative number")
}
}
readint()
n=100
for (i in 1:n){
print(paste("Hello for ",i," user"))
}
'''
install.packages("ggplot")
install.packages("ggplot2")
cat("\014")
history
history()
cat("\014")
install.packages("ggplot2")
library(ggplot2)
read.csv('custdata.csv')
library(ggplot2)
ggplot(a) + geom_bar(aes(x=marital.stat))
ggplot(custdata) + geom_histogram(aes(x=age), binwidth = 5,fill='gray')
custdata <- read.csv('custdata.csv')
ggplot(custdata) + geom_histogram(aes(x=age), binwidth = 5,fill='gray')
ggplot(custdata) +
geom_density(aes(x=income)) +
scale_x_continuous(labels=dollar)
custdate
custdata
custdata.columns
custdata.column
custdata.col
names(custdata)
library(scales)
ggplot(custdata) +
geom_density(aes(x=income)) +
scale_x_continuous(labels=dollar)
ggplot(custdata)+ geom_density(aes(x=income))+
scale_x_log10((breaks=c(100,1000,10000,100000),labels=dollar)+
annotation_logticks(sides="bt"))
ggplot(custdata)+ geom_density(aes(x=income))+
scale_x_log10((breaks=c(100,1000,10000,100000),labels=dollar)+
annotation_logticks(sides="bt")
ggplot(custdata)+ geom_density(aes(x=income))+
scale_x_log10((breaks=c(100,1000,10000,100000),labels=dollar) + annotation_logticks(sides="bt")
lot(custdata)+ geom_density(aes(x=income))+
scale_x_log10((breaks=c(100,1000,10000,100000),labels=dollar))+
annotation_logticks(sides="bt")
ggplot(custdata)+ geom_density(aes(x=income))+
scale_x_log10(breaks=c(100,1000,10000,100000),labels=dollar)+
annotation_logticks(sides="bt")
ggplot(custdata)
+ geom_bar(aes(x=marital.stat,fill=health.ins),position = "dodge")
ggplot(custdata)
+ geom_bar(aes(x=marital.stat,
fill=health.ins),
position = "dodge")
x<-c(1,"a",TRUE)
class(x)
repeat
()
repeat{}
a <-c(1,2,3,4,5)
2 %in% a
x<2:5
x<-2:5
y<-5:8
x+y
mat <- matrix(1:9, nrow=3,ncol=3)
mat
mat <- matrix(1:9, nrow=3,ncol=3,byrow=True)
mat <- matrix(1:9, nrow=3,ncol=3,byrow=TRUE)
mat
apply(mat,2,sum)
arr <- array(c((1,2,3),(4,5,6),(7,8,9)),dim=c(3,3,2))
arr <- array(c(1,2,3,4,5,6,7,8,9),dim=c(3,3,2))
arr
arr <- array(c(1,2,3,4,5,6,7,8,9),dim=c(3,3,2),dimnames = c("one","two","three"))
arr <- array(c(1,2,3,4,5,6,7,8,9),dim=c(3,3,2),dimnames = list(c("one","two","three")))
arr
arr <- array(c(1,2,3,4,5,6,7,8,9),dim=c(3,3,2),dimnames = list(c("one_r","two_r","three_r"),c("one_c","two_c","three_c")))
arr
arr <- array(1:9,dim=c(3,3,2),dimnames = list(c("one_r","two_r","three_r"),c("one_c","two_c","three_c")))
arr
mat <- matrix(11:19, nrow=3, ncol=3,byrow = TRUE)
mat
apply(mat,2,sum)
x <- c(18,54,38,29,60,42)
quantile(x)
setwd("~/GitHub/xGModelR")
# reading the data
data = read.csv(file="data/shot_data.csv")
# to print the first five rows of the dataframe we're working with
head(data)
# putting values in variables
goal = data$Goal
x = data$X*105/100
y = data$C*65/100
#finding distance and angle of the shot from the goal post
dist = sqrt(x^2+y^2)
ang = atan(7.32*x/(x^2+y^2-(7.32/2)^2))
# creating new columns in the dataframe
data$Distance = dist
data$Angle = ang
# plotting histograms of goals
barplot(table(goal), xlab="Goal Scored", ylab="Number of Goals scored",main="Goal Data")
# modelling the logistic regression with the
# independent features as Angle and Distance
# dependent features as Goal
mod <- glm(Goal ~ Angle + Distance, data=data, family=binomial)
summary(mod)
# getting the intercepts of the model
int <- coef(mod)
int_coef <- int[1]
ang_coef <- int[2]
dist_coef <- int[3]
# giving the xG value to the shots
for (i in seq(1,nrow(data))){
sum = int_coef + ang_coef*data[i,"Angle"] + (dist_coef*data[i,"Distance"])
data[i,"xG"] = exp(sum)/(1+exp(sum))
}
# plotting a few plots to show dependency of xG on Distance and Angle
plot(dist,data$xG,main="Expected Goals vs Distance",xlab="Distance",ylab="xG",ylim=c(0,1))
plot(ang,data$xG,main="Expected Goals vs Angle",xlab="Angle",ylab="xG",xlim=c(0,2),ylim=c(0,1))
